1. what is Json data ?

Jab data URL se aata hai (ya frontend se request ke through aata hai), wo raw format me hota hai, jo human-readable nahi hota. express.json() usko proper JavaScript object me convert kar deta hai, jo easily samajh aata hai aur use kar sakte hain.

🌍 Without express.json() (Raw Form)
Agar express.json() nahi lagate, to data kuch is tarah dikhega (as a raw string):


"{\"name\":\"Ayush\",\"age\":22}"
Ye escaped string hota hai, jo samajhna mushkil hai.


✅ With express.json() (Proper JSON)
Agar express.json() laga diya, to wahi data automatically convert ho jayega:

{ name: "Ayush", age: 22 }
Ab ye ek JavaScript object ban gaya, jise easily access kar sakte hain:

console.log(req.body.name); // Output: Ayush
console.log(req.body.age); 


ISILYE HMM APNE CODE ME INCLUDE KARTE HAIN KI DATA SAMJH AAYE AUR ISE EK BAAR BSS MAIN FILE ME DAAL DO BSS HO GAYA.:

app.use(express.json()); // JSON data handle karne ke liye AUR HAAN YE EK MIDDLEWARE HAIN.

------------------------------------------------------------------

hmm professional project me app.get use nhi karte balki router.get ka use karte hain. aur main server file me yaani server.js me saare router files ko call kar lete hain. ✅ server.js → Routes ko connect karega (Sab kuch ek saath chale).

pehle jo pehla file banega usme router import karenge :

        const express = require('express');
        
        const router = express.Router(); // 'Router' should be capitalized


aur uske baad routes banega. Aur haan routes ki alag alag files hongi jaise jo users ke liye hai vo alag, jaise user kuch upload kiya ya delete kiya apne profile se. 

Doosra vaise routes jo naaye users ke liye honge like login, sinup, etc etc.

mujhe utna abhi nhi pata ki aur kitne tarah ke routes files banti hain.

            │── /routes         # Routes folder
            │    ├── userRoutes.js    #files
            │    ├── authRoutes.js    
            │    ├── postRoutes.js 

----------------------------------------

Basic professional Project Structure :

        /my-express-app
            │── server.js       # Main entry point
            │── /routes         # Routes folder
            │    ├── userRoutes.js    
            │    ├── authRoutes.js    
            │    ├── postRoutes.js    
            │── /controllers    # Business logic
            │    ├── userController.js
            │    ├── authController.js
            │── /models         # Database schemas
            │    ├── userModel.js
            │── /middleware     # Security & auth
            │    ├── authMiddleware.js

aur bhi iske sath honge like node modules and .env and package.json, but this is main...

1. 📌 config Folder Kya Hota Hai?
✅ config folder backend ke important settings aur configurations store karne ke liye hota hai.
✅ Isme database connection, secret keys, aur APIs ka setup hota hai.
✅ Ye code ko clean aur maintainable banata hai, taki sab kuch ek jagah rahe aur alag-alag files me bar-bar likhna na pade.


    /config
       ├── db.js          // Database connection
       ├── keys.js        // Secret keys and environment variables
       ├── serverConfig.js // Server related settings

2.  💡 Models folder ka kaam hota hai database ka structure define karna, yani ki data ka format aur rules set karna ki kaunsa data database me store hoga aur kaise.

3. 📌 .env File Kya Hoti Hai?

        ✅ .env (environment file) ek hidden file hoti hai jo sensitive information store karne ke liye use hoti hai.
        ✅ Isme API keys, database URLs, JWT secrets, aur environment-specific settings rakhe jaate hain.
        ✅ Iska fayda ye hai ki sensitive data code me hardcode nahi hota aur easily change ho sakta hai.

         .env File Ka Structure

                MONGO_URI=mongodb+srv://yourusername:yourpassword@cluster0.mongodb.net/myDB
                PORT=5000
                JWT_SECRET=supersecretkey
                NODE_ENV=development

        📌 .env Ko Backend Me Kaise Use Kare?
        1️⃣ Pehle dotenv Package Install Karo

        2️⃣ .env File Ko Import Karna
        Apne server.js ya index.js me sabse upar ye likho:

        require("dotenv").config();
        ✅ Ye .env file me likhi values ko load kar dega.

        3️⃣ .env File Ki Values Ko Access Karna
        Ab hum .env file ki values ko process.env ke through access kar sakte hain.

                    eg.     process.env.MONGO_URI,

4. 📌 CORS (Cross-Origin Resource Sharing) Kya Hota Hai?

    ✅ CORS ek security feature hai jo browser enforce karta hai.
    ✅ Ye decide karta hai ki ek website dusre domain ke server se request bhej sakti hai ya nahi.
    ✅ By default, browsers cross-origin requests ko block kar dete hain agar server explicit permission na de.

    📌 Same-Origin Policy Kya Hoti Hai?
        Browsers "Same-Origin Policy" follow karte hain, jisme:
        ✔ Agar frontend (http://localhost:3000) backend (http://localhost:5000) se request karega, toh browser block kar dega, kyunki dono different origins hain.
        ✔ Origin ka matlab hota hai: Protocol + Domain + Port

    ✅ Same-Origin: http://example.com → http://example.com/api (Allowed)
        ❌ Cross-Origin: http://example.com → http://api.example.com (Blocked)
        📌 CORS Error Kab Aata Hai?
        Agar frontend aur backend alag domains pe chal rahe hain (e.g., React frontend localhost:3000 and Node.js backend localhost:5000),
        toh browser cross-origin request ko block kar deta hai aur CORS error aata hai.

    🛑 Example CORS Error in Browser Console:

        Access to fetch at 'http://localhost:5000/api' from origin 'http://localhost:3000' 
        has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
        ✅ Isko fix karne ke liye backend me CORS allow karna padta hai.

    📌 CORS Fix Kaise Karein?
    ✅ 1️⃣ cors Package Install Karo

    npm install cors
    ✅ 2️⃣ cors Middleware Ko Use Karo
    Apne server.js file me CORS ko enable kar do:


    const express = require("express");
    const cors = require("cors");

    const app = express();

    // ✅ CORS Enable Karo
    app.use(cors());

summary : 
✔ CORS ek security policy hai jo browser enforce karta hai.
✔ Agar frontend aur backend alag domains pe hain, toh browser CORS error de sakta hai.
✔ CORS ko fix karne ke liye cors middleware use karna padta hai.
✔ Security best practice: Sirf required origins aur headers allow karo.
✔ Agar JWT tokens ya cookies use kar rahe ho, toh credentials: true enable karo. 🚀


5. const cookieParser = require("cookie-parser"): 

        📌 cookie-parser Kya Hota Hai?
        ✅ cookie-parser ek middleware hai jo Express.js me cookies ko handle karne ke liye use hota hai.
        ✅ Cookies backend aur frontend ke beech me small pieces of data store karne ke liye use hoti hain.
        ✅ Agar backend me authentication ke liye JWT token cookies me store kar rahe ho, toh cookie-parser install karna zaroori hai.

        📌 cookie-parser Install Kaise Karein?
        Terminal me install karne ke liye:
       
        npm install cookie-parser


        📌 Express.js Me Use Kaise Karein?
        ✅ 1️⃣ Import Karo Aur Middleware Me Use Karo
        
        const express = require("express");
        const cookieParser = require("cookie-parser");

        const app = express();

        // ✅ Cookie Parser Middleware Enable Karo
        app.use(cookieParser());

        ✅ Ab backend incoming requests ki cookies ko parse kar sakta hai.

        📌 Cookies Set Kaise Karein?

        Cookies tabhi kaam karegi jab backend me cookie-parser enabled hoga.

        ✅ 2️⃣ Backend Me Cookie Set Karna (JWT Token Store Karna)
        
        app.post("/login", (req, res) => {
            const token = "some-jwt-token"; // Normally, yeh JWT token hoga
            res.cookie("token", token, {
                httpOnly: true,  // ✅ JavaScript se access nahi kiya ja sakta
                secure: true,    // ✅ Sirf HTTPS pe kaam karega
                sameSite: "Strict", 
                maxAge: 3600000, // ✅ 1 hour tak valid rahega
            }).json({ message: "Login Successful" });
        });

        ✅ Yeh cookie frontend ke browser me store ho jayegi.

        📌 Cookies Read Kaise Karein?
        Agar tumhe frontend se aayi request ki cookies read karni ho, toh:

        app.get("/dashboard", (req, res) => {
            const token = req.cookies.token; // ✅ Request ki cookies ko read karna
            if (!token) {
                return res.status(401).json({ message: "Unauthorized" });
            }
            res.json({ message: "Welcome to Dashboard", token });
        });

        ✅ Ab backend token ko check karke authentication verify kar sakta hai.

        📌 Cookies Delete Kaise Karein?
        Agar logout pe token delete karna ho, toh cookie ko clear karna padega:

       
        app.post("/logout", (req, res) => {
            res.clearCookie("token").json({ message: "Logout Successful" });
        });
        
        ✅ Ab user logout hote hi cookie delete ho jayegi.

        📌 Short Summary
        ✔ cookie-parser ek middleware hai jo Express.js me cookies ko handle karta hai.
        ✔ JWT token authentication me cookies kaafi useful hoti hain.
        ✔ Cookies backend se set, read aur delete ki ja sakti hain.
        ✔ httpOnly: true cookies ko secure banata hai (JavaScript access nahi kar sakta).
        ✔ secure: true sirf HTTPS pe kaam karega.
        ✔ Logout hone par res.clearCookie("token") use karke cookies delete karo. 🚀









---------------------------------------------------------------------------

Now aage bharne se pehle database setup karna hoga kyunki step by step chal rhe hain na :

first get link form atlas.

then install mongoose in your project via terminal.

mongoose ek js library hai jo tumhare js code ko mongodb database se connect karti hain bss.

ab hmm do files banate hain :
             1. Config ke andar db.js => isme me code se Database connect karne ka code likhenge sirf connect ke liye.
             2. Models Folder ke andar user.model.js (naam db kis type ka hai uske hisab se hmm yahan pe users ki details save karenge isliye. agar product ki details save karte to product hota). => isme hmm banate hain ki database me data kaise save hoga , db ka structure kaisa hoga. data kya jayega aur uska structure.
             
               

             eg.        const mongoose = require("mongoose");

                        const userSchema = new mongoose.Schema({
                            name: { type: String, required: true },
                            email: { type: String, required: true, unique: true },
                            password: { type: String, required: true },
                        });

                        module.exports = mongoose.model("User", userSchema);

                        iss last code ka matlab hai ki jo db ka structure hoga vo UserSchema hoga aur databse ka naam User hoga.

ye dono files ko hmm main file me call karenge, dono ko nhi balki sirf db connection wala ko bss server.js me import kar ke call karenge, kyunki jaise hin hamara main file chale hamara db connection ka code chale aur db connect ho jaaye , baaki data to hmm aaram se bhegenge na....

        
        const connectDB = require("./config/database"); // MongoDB Connection
        connectDB();

data structure ka file hmm uss route me bhenjege jahan uska need hoga :

    Haan, bilkul sahi! 😎 Data structure (models) ka use sirf un routes me hoga jahan zaroorat hogi.

    📌 Kaise Use Karenge?
    Database structure (user.model.js) sirf ek baar banega.
    Jis route ko uska data chahiye, wahi usko import karega.

aise import karenge : const User = require("../models/user.model"); // 👈 Import model

ab jab hmne import kar liya ab hmm ise call nhi karenge hmm pehle hin ise User variable me apna databse daal chuke hai aur abb agar ise DB se kuch chahiye to hmm aise lenge :

        User.findOne({ email }); ye kya karega ki iss email jis user ka hoga , uss user ka poora data de dega.

ab hmm dekhnge ki user value daalega to data kaise db me jaayega 


----------------------------------------------------------------------------------------

ab hmm dekhnge ki user value daalega to data kaise db me jaayega : 

    user jab bhi form bharta hai ya koi bhi data deta hai to data url se aati hain. URL ke body me aati hai hmm use aise reach karte hain : 

            const { name, email, password } = req.body; yahan pe destructure use kiya hai.

            request . body me se ye 3 no data ka variable ban jaega aur uss data ko restore kar lega.

            1. kyunki users pehli baar signup karega to :

                    // ✅ Check if user already exists
                    let user = await User.findOne({ email });
                    if (user) {
                        return res.status(400).json({ message: "User already exists" });
                    }



            return res.status(400).json({ message: "User already exists" });
            👉 Ye line server se client ko ek response bhej rahi hai. 🚀
            Chalo ise step-by-step samajhte hain:

                📌 1️⃣ res.status(400) :

                    res → Response ka short form hai, jo client ko reply bhejne ke liye use hota hai.
                    .status(400) → Ye HTTP Status Code hai, jo batata hai ki request galat thi (Bad Request).
                    400 ka matlab hai ki user ki request valid nahi hai, jaise ki email already exist kar raha hai.
                    json data ka matlan iss data ko as json data bhej do bss.
                
                📌 Example of Status Codes:


                        Code	Meaning
                        200	OK (Request sahi thi, data mil gaya)
                        201	Created (Naya data successfully create hua)
                        400	Bad Request (User ki taraf se galti hai)
                        401	Unauthorized (Authentication required)
                        404	Not Found (Data nahi mila)
                        500	Internal Server Error (Server ki taraf se issue)


            2. ab ham password ko hash karte hain ek package ki help se (bcrypt) :
                    npm i bcrypt bss ho gaya , ise require karo jisme chahiye :

                    const bcrypt = require("bcrypt");

                    and then : 

                         // ✅ Hash Password
                            const salt = await bcrypt.genSalt(10);
                            const hashedPassword = await bcrypt.hash(password, salt);


                        🔐 Understanding This Code:

                // ✅ Hash Password
                const salt = await bcrypt.genSalt(10);
                const hashedPassword = await bcrypt.hash(password, salt);


                Ye password hashing ka process hai, jo bcrypt library ka use karke password ko encrypt karta hai. 🚀
                Chalo step-by-step breakdown dekhte hain.

                🔹 1️⃣ bcrypt.genSalt(10)

                const salt = await bcrypt.genSalt(10);

                Salt ek random string hota hai jo password me add kiya jata hai.
                Ye hashing ko aur strong banata hai.
                10 ka matlab 10 rounds tak hashing algorithm chalega.
                Jitne zyada rounds, utna zyada secure hashing (but slow performance).

                📌 Example Salt Output:
                    $2b$10$w45FQIvOaLOpGUnxyLkNEO
                    Ye ek unique salt hai jo password ke sath combine hoga.

                🔹 2️⃣ bcrypt.hash(password, salt)

                const hashedPassword = await bcrypt.hash(password, salt);
                Password + Salt ko mix karke ek secure hashed password generate hota hai.

        3. ab hmm user ke email, password, aur password ko save karenge :

              // ✅ Create New User
        user = new User({ name, email, password: hashedPassword }); // password me actual password ke ulta hash password bheje.
                await user.save(); 

        ek aur baat maan lo hmne password hash karke hard password db me store kar diya ab login ke samay uss paasword ko user ke actual password se match/decode bhi karna hoga na to : 

                // ✅ Compare Password
                const isMatch = await bcrypt.compare(password, user.password); checking ki user ka password aur hash match kiya ki nhi aur agar kiya to login varna return invalid niche wala
                if (!isMatch) return res.status(400).json({ message: "Invalid email or password" });


        4. ab ham 4 step me token create karenge kyunki use web ya app me user ke pass bhejna hota hai ki user agar ek baar login kiya ho to use baar baar , har baar login na karna pade :

                hmm yahan JWT token ka use karenge :
                npm i jsonwebtoken and ise uss file me require bhi karenge  : const jwt = require("jsonwebtoken");


                now, chalo token banate hain : 

                          // ✅ Generate JWT Token
                        const token = jwt.sign({ userId: user._id }, "akka", { expiresIn: "1h" });

                        Breakdown of code :

                        const token = jwt.sign({ userId: user._id }, "akka", { expiresIn: "1h" });
                        Part :                	         Explanation :
                       1.  { userId: user._id }        	 Payload: Token ke andar user ka unique ID store ho raha hai.ye user id user DB ka id hai 
                        2. "akka"	Secret Key:              Isse JWT sign kiya jata hai. Sirf server isko verify kar sakta hai.
                       3.  { expiresIn: "1h" }	             Expiration: Token 1 hour ke baad invalid ho jayega.

 1. token ban gaya ab ise bhejna hai user ke pass to 2 types hai Web and APP :

    A. Web : web me hmm direct token set kar dete hai backend se , like 

            const token = jwt.sign({ userId: user._id }, "akka", { expiresIn: "1h" });

            res.cookie("token", token, {
                httpOnly: true, // ✅ JavaScript can't access it
                secure: true,   // ✅ Works only on HTTPS
                sameSite: "Strict", 
                maxAge: 3600000, // 1 Hour
            }).status(200).json({ message: "Login Successful" });

    B. App : lekin app internet pe yaani website nhi hai na to hame server se token frontend pe as JSON data bhejna hota hai and phir usko frontend yaani app pe receive karke localStorage ya AsyncStorage me store karna padta hai aur logic frontend pe hin banata hota hai login logout and signup ka , jo ki hmmlog web ki case me backend se karte the.

            res.status(200).json({
                message: "Login Successful",
                token: token  // ✅ Send to Frontend
            });

    ✅ Conclusion:

    1. Web me backend secure cookies handle karega → frontend par kuch store nahi hota!
    2. App me frontend JWT store karega → frontend hi authentication manage karega!

-------------------------------------------------------------------------------------

fetch("https://api.example.com/login", {
    method: "POST",   // ✅ Data send kar rahe hain
    headers: { "Content-Type": "application/json" },  // ✅ JSON format bata rahe hain
    body: JSON.stringify({ email: "test@example.com", password: "123456" }) // ✅ JSON me data bhej rahe hain
})

--------------------------------------------------

2️⃣ Mobile Apps ka AsyncStorage kya hota hai?
React Native apps me AsyncStorage ek permanent storage hota hai.
Ye asynchronous hota hai, yani ye Promise return karta hai aur await/then use karna padta hai.
Example:

    import AsyncStorage from '@react-native-async-storage/async-storage';

    // ✅ Data Store Karna
    await AsyncStorage.setItem("token", "12345");

    // ✅ Data Get Karna
    const token = await AsyncStorage.getItem("token");
    console.log(token); // "12345"

✅ Features:
✔️ Mobile Apps me kaam karta hai (React Native ke liye best option).
✔️ Large data store kar sakta hai (Compared to localStorage).

❌ Limitations:
❌ Async nature hone ki wajah se await ya .then() use karna padta hai.
❌ LocalStorage jitna fast nahi hota (kyunki har baar Promise resolve karna padta hai).

Haan! Agar tumhe AsyncStorage ka slow hona problem lag raha hai, to aur bhi better options hain jo fast hain aur secure bhi.

1️⃣ MMKV (Fastest & Best Alternative)
✔ Super Fast (~30x faster than AsyncStorage)
✔ Synchronous (sync) – Matlab await ya .then() ka jhanjhat nahi.
✔ Secure (Encrypted Storage) – Token ya sensitive data ke liye best hai.

📌 Install & Setup:
npm install react-native-mmkv

📌 Usage Example:
import { MMKV } from 'react-native-mmkv';

// ✅ Storage Setup
const storage = new MMKV();

// ✅ Data Store Karna
storage.set("token", "12345");

// ✅ Data Get Karna (No await needed!)
const token = storage.getString("token");
console.log(token); // "12345"
⚡ Pros:
✔️ Bohot fast hai (AsyncStorage se ~30x tez chalti hai).
✔️ No async/await – Direct sync call se kaam ho jata hai.
✔️ Encrypted storage – Secure token ya sensitive data ke liye best hai.

❌ Cons:
❌ Size limit hai (Bada JSON ya large data store karne me problem ho sakti hai).
❌ Only for React Native, Web pe nahi chalega.

and more hai.

----------------------------------------------------------------------------------------

iss code me aakhir error argument kahan se aaya , maine pass nhi kiya ?

        try {
            const user = await User.findOne({ email }); // Agar DB down hai ya query galat hai to yahan error aayega
        } catch (error) {
            console.error("Signup Error:", error); // Catch block me aayega
        }

1️⃣ Error kahaan se aata hai?
Agar try block me koi bhi asynchronous function (await) fail hota hai, to Node.js usko catch block me throw kar deta hai.
Jab try block me koi bhi asynchronous function (await) fail hota hai ya koi synchronous error aata hai, to Node.js us error ko catch block me bhej deta hai. Tumne manually error pass nahi kiya, balki jo bhi function fail ho raha hai, uska error automatically catch (error) me chala ja raha hai.



--------------------------------------------------------


